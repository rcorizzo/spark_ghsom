package com.sparkghsom.main.input_generator

import com.sparkghsom.main.ghsom_mixed.{Instance, GHSom,Attribute}
import com.sparkghsom.main.datatypes.{DoubleDimension, NominalDimension, DimensionType, DimensionTypeEnum}
import com.sparkghsom.main.globals.GHSomConfig
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.rdd.RDD
import org.apache.log4j.Logger
import org.apache.log4j.LogManager
import org.apache.commons
import org.apache.commons.io.FileUtils
import java.io.File
import scala.collection.mutable

class CensusData (val dataset : RDD[String]) extends Serializable{
  
  val attributes = Array(
                        Attribute(name = "age", 
                                  index = 0, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                        Attribute(name = "class_of_worker", 
                                  index = 1, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue), 
                       Attribute(name = "industry_code", 
                                  index = 2, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "occupation_code", 
                                  index = 3, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "education", 
                                  index = 4, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "wage_per_hour", 
                                  index = 5, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                       Attribute(name = "enrolled_in_edu_inst_last_wk", 
                                  index = 6, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "marital_status", 
                                  index = 7, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "major_industry_code", 
                                  index = 8, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "major_occupation_code", 
                                  index = 9, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "race", 
                                  index = 10, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "hispanic_origin", 
                                  index = 11, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "sex", 
                                  index = 12, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "member_of_a_labor_union", 
                                  index = 13, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "reason_for_unemployment", 
                                  index = 14, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "full_or_part_time_employment_stat", 
                                  index = 15, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "capital_gains", 
                                  index = 16, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                       Attribute(name = "capital_losses", 
                                  index = 17, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                       Attribute(name = "divdends_from_stocks", 
                                  index = 18, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                       Attribute(name = "tax_filer_status", 
                                  index = 19, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "region_of_previous_residence", 
                                  index = 20, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "state_of_previous_residence", 
                                  index = 21, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "detailed_household_and_family_stat", 
                                  index = 22, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "detailed_household_summary_in_household", 
                                  index = 23, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "live_in_this_house_1_year_ago", 
                                  index = 24, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "num_persons_worked_for_employer", 
                                  index = 25, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue),
                       Attribute(name = "family_members_under_18", 
                                  index = 26, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "country_of_birth_father", 
                                  index = 27, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "country_of_birth_mother", 
                                  index = 28, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "country_of_birth_self", 
                                  index = 29, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "citizenship", 
                                  index = 30, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "own_business_or_self_employed", 
                                  index = 31, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "fill_inc_questionnaire_for_veteran_admin", 
                                  index = 32, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "veterans_benefits", 
                                  index = 33, 
                                  dimensionType = DimensionTypeEnum.NOMINAL,
                                  randomValueFunction = NominalDimension.getRandomDimensionValue),
                       Attribute(name = "weeks_worked_in_year", 
                                  index = 34, 
                                  dimensionType = DimensionTypeEnum.NUMERIC,
                                  randomValueFunction = DoubleDimension.getRandomDimensionValue)
                      )
      
  //val attributes : Array[Attribute] = Array.ofDim(attributeMap.size)
  
  private val datasetOfInstanceObjs = instanizeDataset(dataset)
  
  def printDataset() {
    // println(datasetRDD.count)
  }
  
  def getDataset : RDD[Instance] = datasetOfInstanceObjs
  
  case class Data ( className : String, attributeVector : Array[DimensionType] ) {
    def getInstanceObj = {
      Instance(className, attributeVector)
    }
  }
  
  def instanizeDataset(dataset : RDD[String]) : RDD[Instance] = {
    
    val data = convertToDataRDD(dataset)
    
    val obj = data.first()
    
    // Creates an rdd of : [Index of attribute, attrib-value]
    val attribMap : RDD[(Int,DimensionType)] = 
      data.flatMap( 
                    rec => { 
                          val indexElem = rec.attributeVector.zipWithIndex
                          indexElem.map(tup => (tup._2, tup._1)).toList
                    }
                  )
    
    val maxVector = attribMap.reduceByKey( DimensionType.getMax _).collectAsMap()
    val minVector = attribMap.reduceByKey( DimensionType.getMin _).collectAsMap()
    val domainValues = attribMap.reduceByKey(DimensionType.computeDomainValues).collectAsMap
    
    for (i <- 0 until attributes.size) {
      if (attributes(i).dimensionType == DimensionTypeEnum.NUMERIC) {
        attributes(i).maxValue = maxVector(i)
        attributes(i).minValue = minVector(i)
      }
      else if (attributes(i).dimensionType == DimensionTypeEnum.NOMINAL) {
        attributes(i).domainValues = domainValues(i).asInstanceOf[NominalDimension].getDomainValues
      }
    }
    
    data.map( rec => 
                  Data( 
                        rec.className,
                        rec.attributeVector.zipWithIndex
                                           .map( tup => 
                                               if (tup._1.attributeType == DimensionTypeEnum.NUMERIC) {
                                                 (tup._1 - minVector(tup._2)) / (maxVector(tup._2) - minVector(tup._2))
                                               }
                                               else {
                                                 tup._1
                                               }
                                           )
                      ).getInstanceObj
        )
  }
  
  def convertToDataRDD(dataset : RDD[String]) : RDD[Data] = {
    dataset.map( line => {
      val array = line.split(',')
      Data(
          array(array.length - 1),
          Array.tabulate(attributes.size)(idx => {
              val attribute = attributes(idx)
              if (attribute.dimensionType == DimensionTypeEnum.NUMERIC)
                DoubleDimension(attribute.name, array(idx).toDouble)
              else if (attribute.dimensionType == DimensionTypeEnum.NOMINAL)
                NominalDimension(attribute.name, array(idx))
              else /* TODO : Ordinal */
                NominalDimension(attribute.name, array(idx))
              }
            )
      )
    }
    )
  }
}

object CensusData{
  
  def main(args : Array[String]) {
    val conf = new SparkConf(true)
               .setAppName("Census Data")
               .set("spark.storage.memoryFraction","0")
               .set("spark.executor.memory","2g")
               //.set("spark.serializer", "org.apache.spark.serializer.KryoSerializer")
               .set("spark.default.parallelism","50")
               //.set("spark.kryoserializer.buffer.max","400")
               .setMaster("spark://192.168.101.13:7077")

    val sc = new SparkContext(conf) 
    
    var epochs = GHSomConfig.EPOCHS
    if(args.length >= 1) {
      epochs = args(0).toInt  
    }
    
    val dataset = sc.textFile("hdfs://192.168.101.13:9000/user/ameya/datasets/census_income/census_income.data")
    val datasetReader = new CensusData(dataset) 
    
    val processedDataset = datasetReader.getDataset
    
    val ghsom = GHSom()
    
    ghsom.train(processedDataset, datasetReader.attributes, epochs)
  }
}
